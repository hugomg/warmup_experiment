#!/usr/bin/env python
"""
Write changepoint and classification information into JSON files.
"""

import argparse
import math
import os
import os.path
import rpy2
import rpy2.interactive.packages
import rpy2.robjects
import sys

from rpy2.rinterface import R_VERSION_BUILD

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from warmup.krun_results import read_krun_results_file, write_krun_results_file


class Segment(object):
    """A single segment between two changepoints.
    """
    def __init__(self, start, end, mean, variance):
        self.start = start
        self.end = end
        self.mean = mean
        self.variance = variance
        self.lower_ci = self.mean - 1.96 * math.sqrt(self.variance)
        self.upper_ci = self.mean + 1.96 * math.sqrt(self.variance)

    def overlap(self, other):
        """Return True if the confidence interval of 'other' segment overlaps
        with this segment.
        """
        assert isinstance(other, Segment)
        if self.lower_ci > other.upper_ci or other.lower_ci > self.upper_ci:
            return False
        return True


class Segments(object):
    """A list of Segments for a whole run sequence.
    """
    def __init__(self, length, window_size, cpts, means, variances):
        self.length = length  # Length of original run sequence.
        self.window_size = window_size
        self.segments = list()
        assert len(means) == len(variances) == len(cpts)
        if len(means) == 1:
            segment = Segment(0, self.length - 1, means[0], variances[0])
            self.segments.append(segment)
        else:
            for index in xrange(len(means)):
                segment = None
                if index == 0:
                    segment = Segment(0, cpts[index], means[index], variances[index])
                else:
                    segment = Segment(cpts[index - 1], cpts[index], means[index], variances[index])
                self.segments.append(segment)
        assert cpts[:-1] == [s.end for s in self.segments][:-1]

    @property
    def means(self):
        return [segment.mean for segment in self.segments]

    @property
    def changepoints(self):
        """Return all changepoints.
        The last datum is always a changepoint, so we ignore it.
        """
        if len(self.segments) == 1:
            return list()
        return [segment.end for segment in self.segments][:-1]

    def get_classification(self):
        """Return the classification for this run sequence.
        """
        if len(self.segments) == 1:  # No change points.
            return 'flat'
        # Change in last window.
        elif self.segments[-1].start > (self.length - self.window_size):
            return 'no steady state'
        # Last window is the smallest.
        elif self.segments[-1].mean == min(self.segments, key=lambda s: s.mean):
            return 'warm-up'
        return 'slow down'


def main(in_files, window_size):
    cpt = rpy2.interactive.packages.importr('changepoint')
    r_version = '.'.join(R_VERSION_BUILD[:2])
    print 'Using R version %s and changepoint library %s' % (r_version, cpt.__version__)
    assert cpt.__version__ >= '2.2.2', 'Please update the changepoint library.'
    assert r_version >= '3.3.1', 'Please update R from CRAN.'
    krun_data = dict()
    for filename in in_files:
        assert os.path.exists(filename), 'File %s does not exist.' % filename
        print 'Loading: %s' % filename
        krun_data[filename] = read_krun_results_file(filename)
    for filename in krun_data:
        changepoints = dict()
        classifications = dict()
        changepoint_means = dict()
        rm_outliers = 'all_outliers' in krun_data[filename]
        if not rm_outliers:
            print ('No all_outliers key in %s; please run '
                   './bin/mark_outliers_in_json on your data if you want this '
                   'analysis to exclude outliers.'% filename)
        for bench in krun_data[filename]['wallclock_times']:
            changepoints[bench] = list()
            classifications[bench] = list()
            changepoint_means[bench] = list()
            for index, p_exec in enumerate(krun_data[filename]['wallclock_times'][bench]):
                if rm_outliers:
                    outliers = krun_data[filename]['all_outliers'][bench][index]
                else:
                    outliers = list()
                segments = get_segments(cpt, p_exec[:], window_size, outliers)
                changepoints[bench].append(segments.changepoints)
                changepoint_means[bench].append(segments.means)
                classifications[bench].append(segments.get_classification())
        krun_data[filename]['changepoints'] = changepoints
        krun_data[filename]['changepoint_means'] = changepoint_means
        krun_data[filename]['classifications'] = classifications
        new_filename = create_output_filename(filename)
        print 'Writing out: %s' % new_filename
        write_krun_results_file(krun_data[filename], new_filename)


def get_segments(cpt, p_exec, window_size, outliers):
    length = len(p_exec)  # Will change when we remove outliers.
    indices = sorted(outliers, reverse=True)
    for index in indices:
        del p_exec[index]
    measurements = rpy2.robjects.FloatVector(p_exec)
    changepoints = cpt.cpt_meanvar(measurements, method='PELT')
    # List indices in R start at 1.
    c_points = [cpoint - 1 for cpoint in changepoints.slots['cpts']]
    # If outliers were deleted, the index of each changepoint will have moved.
    # Here, we adjust the indices to match the original data.
    for outlier in outliers:
        for index in xrange(len(c_points)):
            if c_points[index] >= outlier:
                c_points[index] += 1
    # Means is a list of mean values for each data segment between changepoints.
    means, variances = list(), list()
    for mean in changepoints.slots['param.est'][changepoints.slots['param.est'].names.index('mean')]:
        means.append(float(mean))
    for var_ in changepoints.slots['param.est'][changepoints.slots['param.est'].names.index('variance')]:
        variances.append(float(var_))
    return Segments(length, window_size, c_points, means, variances)


def create_output_filename(in_file_name):
    directory = os.path.dirname(in_file_name)
    basename = os.path.basename(in_file_name)
    if basename.endswith('.json.bz2'):
        root_name = basename[:-9]
    else:
        root_name = os.path.splitext(basename)[0]
    base_out = root_name + '_changepoints.json.bz2'
    return os.path.join(directory, base_out)


def create_cli_parser():
    """Create a parser to deal with command line switches.
    """
    script = os.path.basename(__file__)
    description = ("""Write changepoints and classifications into Krun results
file(s). This script does not alter your original Krun results file. Instead
it writes out a new file. If you want outliers to be excluded from the
changepoint calculations, you should first run your data through the
./bin/mark_outliers_in_json script. You should use the same moving window size
to calculate outliers and changepoints and this will be written into the name
of the output file, for example if the input file is:

    results_outliers_200.json.bz2

and the window size is 200, the output of this script will be stored in file:

    results_outliers_w200_changepoints.json.bz2.

Example usage:
    $ python %s results1.json.bz2
    $ python %s  --window 250 results1.json.bz2 results2.json.bz2\n""" % (script, script))
    parser = argparse.ArgumentParser(description)
    parser.add_argument('json_files', nargs='+', action='append', default=[],
                        type=str, help='One or more Krun result files.')
    parser.add_argument('--window', '-w', action='store', dest='window_size',
                        default=200, type=int,
                        help=('Size of the sliding window used by '
                              'mark_outliers_in_json script. This is needed to '
                              'classify process executions.'))
    return parser


if __name__ == '__main__':
    parser = create_cli_parser()
    options = parser.parse_args()
    print ('Marking changepoints and classifications with sliding window size: %d' %
           options.window_size)
    main(options.json_files[0], options.window_size)
