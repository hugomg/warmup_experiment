#!/usr/bin/env python2.7
"""Summarise benchmark classifications.
Must be run after mark_changepoints_in_json.
"""

import argparse
import os
import os.path
import sys

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from warmup.krun_results import parse_krun_file_with_changepoints
from warmup.summary_statistics import collect_summary_statistics, convert_to_latex, write_latex_table


def create_cli_parser():
    """Create a parser to deal with command line switches."""

    script = os.path.basename(__file__)
    description = (('Summarise benchmark classifications stored within a Krun ' +
                    'results file. Must be run after mark_changepoints_in_json.' +
                    '\n\nExample usage:\n\n' +
                    '\t$ python %s -l summary.tex results.json.bz2') % script)
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('json_files', action='append', nargs='+', default=[],
                        type=str, help='One or more Krun result files.')
    parser.add_argument('--outfile', '-o', action='store', dest='latex_file',
                        type=str, help='Name of the LaTeX file to write to.',
                        required=True)
    parser.add_argument('--num-splits', '-s', action='store',
                        type=int, help='Number of horizontal splits.',
                        default=1)
    parser.add_argument('--with-preamble', action='store_true',
                        dest='with_preamble', default=False,
                        help='Write out a whole LaTeX article (not just the table).')
    return parser


if __name__ == '__main__':
    parser = create_cli_parser()
    options = parser.parse_args()
    classifier, data_dcts = parse_krun_file_with_changepoints(options.json_files[0])
    if options.with_preamble:
        print 'Writing out full document, with preamble.'
    summary_data = collect_summary_statistics(data_dcts, classifier['half_bound'],
                                              classifier['delta'], classifier['steady'])
    machine, bmarks, latex_summary = convert_to_latex(summary_data, classifier['half_bound'],
                                         classifier['delta'], classifier['steady'])
    print 'Writing data to:', options.latex_file
    write_latex_table(machine, bmarks, latex_summary, options.latex_file,
                      options.num_splits, options.with_preamble)
