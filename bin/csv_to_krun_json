#!/usr/bin/env python2.7
"""
Convert a CSV file of timing measurements to JSON, suitable for using with the
other scripts here.
"""

import argparse
import csv
import os
import os.path
import sys

sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'warmup'))
from warmup.krun_results import write_krun_results_file


def main(in_files, language, vm, uname):
    for filename in in_files:
        data_dictionary = { 'data': dict(), # Measurement data.
                   'core_cycles_data': dict(),
                   'aperf_data': dict(),
                   'mperf_data': dict(),
                   'instr_data': dict(),
                   'audit': dict(),
                   'config': '',
                   'reboots': 0,
                   'starting_temperatures': list(),
                   'eta_estimates': list(),
                   'error_flag': list(), }
        with open(filename, 'r') as fd:
            data_dictionary['audit']['uname'] = uname
            reader = csv.reader(fd)
            reader.next()  # Skip first row, which contains column names.
            for row in reader:
                # First cell contains process execution number.
                bench = row[1]
                data = [float(datum) for datum in row[2:]]
                key = '%s:%s:%s' % (language, bench, vm)
                if key not in data_dictionary['data']:
                    data_dictionary['data'][key] = list()
                    data_dictionary['core_cycles_data'][key] = list()
                    data_dictionary['aperf_data'][key] = list()
                    data_dictionary['mperf_data'][key] = list()
                    data_dictionary['instr_data'][key] = list()
                data_dictionary['data'][key].append(data)
                data_dictionary['core_cycles_data'][key].append(None)
                data_dictionary['aperf_data'][key].append(None)
                data_dictionary['mperf_data'][key].append(None)
                data_dictionary['instr_data'][key].append(None)
        new_filename = os.path.splitext(filename)[0] + '.json.bz2'
        write_krun_results_file(data_dictionary, new_filename)


def create_cli_parser():
    """Create a parser to deal with command line switches.
    """
    script = os.path.basename(__file__)
    description = ('Convert a CSV results file to .json.bz2 suitable for use '
                   'with the\nscripts here. CSV files are assumed to be in the '
                   'following format:\n\n'
                   'process num, bench_name, 0, 1, 2, ...\n'
                   '0, spectral norm, 0.2, 0.1, 0.4, ...\n'
                   '1, spectral norm, 0.3, 0.15, 0.2, ...\n'
                   '\n\nExample usage:\n\n\t$ pypy %s -l java-default -v '
                   'Hotspot -u "Linux snim2-r700 4.4.0-38-generic #57-Ubuntu '
                   'SMP Tue Sep 6 15:42:33 UTC 2016 x86_64 x86_64 x86_64 '
                   'GNU/Linux" results.csv\n'
                   % script)
    parser = argparse.ArgumentParser(description)
    parser.add_argument('csv_files',
                        nargs='+',
                        action='append',
                        default=[],
                        type=str,
                        help='One or more CSV result files.')
    parser.add_argument('--language', '-l',
                        dest='language',
                        action='store',
                        default='java-default',
                        type=str,
                        help='Language under benchmark.')
    parser.add_argument('--vm', '-v',
                        dest='vm',
                        action='store',
                        default='Hotspot',
                        type=str,
                        help='One or more CSV result files.')
    parser.add_argument('--uname', '-u',
                        dest='uname',
                        action='store',
                        default='',
                        type=str,
                        help='uname -a string from benchmarking machine.')
    return parser


if __name__ == '__main__':
    parser = create_cli_parser()
    options = parser.parse_args()
    main(options.csv_files[0], options.language, options.vm, options.uname)
