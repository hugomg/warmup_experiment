#!/usr/bin/env python2.7
"""
Convert a CSV file of timing measurements to JSON, suitable for using with the
other scripts here.
"""

import argparse
import os
import os.path
import sys

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from warmup.krun_results import csv_to_krun_json


def main(in_files, language, vm, uname):
    return csv_to_krun_json(in_files, language, vm, uname)


def create_cli_parser():
    """Create a parser to deal with command line switches.
    """
    script = os.path.basename(__file__)
    description = ('Convert a CSV results file to .json.bz2 suitable for use '
                   'with the scripts here. CSV files are assumed to be in the '
                   'following format:\n\n'
                   'process num, bench_name, 0, 1, 2, ...\n'
                   '0, spectral norm, 0.2, 0.1, 0.4, ...\n'
                   '1, spectral norm, 0.3, 0.15, 0.2, ...\n'
                   '\n\nExample usage:\n\n\t$ pypy %s -l java-default -v '
                   'Hotspot -u "Linux snim2-r700 4.4.0-38-generic #57-Ubuntu '
                   'SMP Tue Sep 6 15:42:33 UTC 2016 x86_64 x86_64 x86_64 '
                   'GNU/Linux" results.csv\n'
                   % script)
    parser = argparse.ArgumentParser(description,
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('csv_files', nargs='+', action='append', default=[],
                        type=str, help='One or more CSV result files.')
    parser.add_argument('--language', '-l', dest='language', action='store',
                        type=str, help='Language under benchmark.')
    parser.add_argument('--vm', '-v', dest='vm', action='store', default='Hotspot',
                        type=str, help='Virtual machine under test.')
    parser.add_argument('--uname', '-u', dest='uname', action='store', default='',
                        type=str, help='uname -a string from benchmarking machine.')
    return parser


if __name__ == '__main__':
    parser = create_cli_parser()
    options = parser.parse_args()
    main(options.csv_files[0], options.language, options.vm, options.uname)
