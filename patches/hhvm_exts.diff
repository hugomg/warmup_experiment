diff --git a/hphp/hhvm/CMakeLists.txt b/hphp/hhvm/CMakeLists.txt
index 1d0822d..ad3e69b 100644
--- a/hphp/hhvm/CMakeLists.txt
+++ b/hphp/hhvm/CMakeLists.txt
@@ -37,6 +37,9 @@ if(CYGWIN)
   target_link_libraries(hhvm dbghelp)
 endif()
 
+# softdev
+target_link_libraries(hhvm "$ENV{LIBKRUN_DIR}/libkruntime.so")
+
 # Check whether atomic operations require -latomic or not
 # See https://github.com/facebook/hhvm/issues/5217
 INCLUDE(CheckCXXSourceCompiles)
diff --git a/hphp/runtime/ext/std/ext_std_misc.cpp b/hphp/runtime/ext/std/ext_std_misc.cpp
index 8b08cec..f098a32 100644
--- a/hphp/runtime/ext/std/ext_std_misc.cpp
+++ b/hphp/runtime/ext/std/ext_std_misc.cpp
@@ -44,10 +44,15 @@
 #include "hphp/util/current-executable.h"
 #include "hphp/util/logger.h"
 
+#include <inttypes.h>
+
 #ifndef _MSC_VER
 #include <sys/param.h> // MAXPATHLEN is here
 #endif
 
+#include <time.h>
+#include <libkruntime.h>
+
 namespace HPHP {
 
 IMPLEMENT_THREAD_LOCAL(std::string, s_misc_highlight_default_string);
@@ -192,6 +197,9 @@ void StandardExtension::initMisc() {
     HHVM_FE(sys_getloadavg);
     HHVM_FE(token_get_all);
     HHVM_FE(token_name);
+    HHVM_FE(clock_gettime_monotonic);
+    HHVM_FE(read_ts_reg_start_double);
+    HHVM_FE(read_ts_reg_stop_double);
     HHVM_FE(hphp_to_string);
     HHVM_FALIAS(__SystemLib\\max2, SystemLib_max2);
     HHVM_FALIAS(__SystemLib\\min2, SystemLib_min2);
@@ -966,5 +974,36 @@ Variant HHVM_FUNCTION(SystemLib_min2, const Variant& value1,
 #undef YYTOKEN_MAP
 #undef YYTOKEN
 
+/*
+ * Access to monotonic clock added by soft-dev for benchmarking.
+ * Not intended for general inclusion in HHVM
+ */
+#ifdef __linux__
+#define ACTUAL_MONOTONIC_CLOCK CLOCK_MONOTONIC_RAW
+#else
+#define ACTUAL_MONOTONIC_CLOCK CLOCK_MONOTONIC
+#endif
+
+double HHVM_FUNCTION(clock_gettime_monotonic) {
+	struct timespec		ts;
+	double			result;
+
+	if ((clock_gettime(ACTUAL_MONOTONIC_CLOCK, &ts)) < 0) {
+		perror("clock_gettime");
+		exit(1);
+	}
+
+	result = ts.tv_sec + ts.tv_nsec * pow(10, -9);
+	return (result);
+}
+
+double HHVM_FUNCTION(read_ts_reg_start_double) {
+    return read_ts_reg_start_double();
+}
+
+double HHVM_FUNCTION(read_ts_reg_stop_double) {
+    return read_ts_reg_stop_double();
+}
+
 ///////////////////////////////////////////////////////////////////////////////
 }
diff --git a/hphp/runtime/ext/std/ext_std_misc.h b/hphp/runtime/ext/std/ext_std_misc.h
index 49db8a5..172a192 100644
--- a/hphp/runtime/ext/std/ext_std_misc.h
+++ b/hphp/runtime/ext/std/ext_std_misc.h
@@ -48,6 +48,9 @@ Variant HHVM_FUNCTION(unpack, const String& format, const String& data);
 Array HHVM_FUNCTION(sys_getloadavg);
 Array HHVM_FUNCTION(token_get_all, const String& source);
 String HHVM_FUNCTION(token_name, int64_t token);
+double HHVM_FUNCTION(clock_gettime_monotonic);
+double HHVM_FUNCTION(read_ts_reg_start_double);
+double HHVM_FUNCTION(read_ts_reg_stop_double);
 String HHVM_FUNCTION(hphp_to_string, const Variant& v);
 Variant HHVM_FUNCTION(SystemLib_max2, const Variant& arg1, const Variant& arg2);
 Variant HHVM_FUNCTION(SystemLib_min2, const Variant& arg1, const Variant& arg2);
diff --git a/hphp/runtime/ext/std/ext_std_misc.php b/hphp/runtime/ext/std/ext_std_misc.php
index da36140..8f7ed9a 100644
--- a/hphp/runtime/ext/std/ext_std_misc.php
+++ b/hphp/runtime/ext/std/ext_std_misc.php
@@ -214,6 +214,16 @@ function token_get_all(string $source): array;
 <<__ParamCoerceModeFalse, __Native>>
 function token_name(int $token): string;
 
+/* Returns the monotonic clock value in seconds.  */
+<<__Native>>
+function clock_gettime_monotonic(): double;
+
+/* Timestamp register */
+<<__Native>>
+function read_ts_reg_start_double(): double;
+<<__Native>>
+function read_ts_reg_stop_double(): double;
+
 /* Casts a given value to a string.
  * @param mixed $v - The value being casted to a string.
  * @return string - The result of the string cast.
