diff --git a/CMakeLists.txt b/CMakeLists.txt
index 17bc415..d6d9a05 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,5 @@
 CMAKE_MINIMUM_REQUIRED(VERSION 2.8.7 FATAL_ERROR)
+CMAKE_POLICY(SET CMP0026 OLD)
 
 # This needs to be done before any languages are enabled or
 # projects are created.
diff --git a/hphp/hhvm/CMakeLists.txt b/hphp/hhvm/CMakeLists.txt
index a7f6380..c23e844 100644
--- a/hphp/hhvm/CMakeLists.txt
+++ b/hphp/hhvm/CMakeLists.txt
@@ -40,6 +40,9 @@ if (ENABLE_SPLIT_DWARF)
   target_link_libraries(hhvm debug "-Wl,--gdb-index")
 endif()
 
+# softdev
+target_link_libraries(hhvm "$ENV{LIBKRUN_DIR}/libkruntime.so")
+
 # Check whether atomic operations require -latomic or not
 # See https://github.com/facebook/hhvm/issues/5217
 INCLUDE(CheckCXXSourceCompiles)
diff --git a/hphp/runtime/ext/std/ext_std_misc.cpp b/hphp/runtime/ext/std/ext_std_misc.cpp
index 3c2f93f..ff5ef32 100644
--- a/hphp/runtime/ext/std/ext_std_misc.cpp
+++ b/hphp/runtime/ext/std/ext_std_misc.cpp
@@ -46,6 +46,9 @@
 #include "hphp/util/current-executable.h"
 #include "hphp/util/logger.h"
 
+#include <inttypes.h>
+#include <libkruntime.h>
+
 namespace HPHP {
 
 IMPLEMENT_THREAD_LOCAL(std::string, s_misc_highlight_default_string);
@@ -212,6 +215,15 @@ void StandardExtension::initMisc() {
     HHVM_FE(sys_getloadavg);
     HHVM_FE(token_get_all);
     HHVM_FE(token_name);
+    HHVM_FE(krun_init);
+    HHVM_FE(krun_done);
+    HHVM_FE(krun_measure);
+    HHVM_FE(krun_clock_gettime_monotonic);
+    HHVM_FE(krun_get_num_cores);
+    HHVM_FE(krun_get_wallclock);
+    HHVM_FE(krun_get_core_cycles_double);
+    HHVM_FE(krun_get_aperf_double);
+    HHVM_FE(krun_get_mperf_double);
     HHVM_FE(hphp_to_string);
     HHVM_FALIAS(__SystemLib\\max2, SystemLib_max2);
     HHVM_FALIAS(__SystemLib\\min2, SystemLib_min2);
@@ -977,5 +989,41 @@ Variant HHVM_FUNCTION(SystemLib_min2, const Variant& value1,
 #undef YYTOKEN_MAP
 #undef YYTOKEN
 
+void HHVM_FUNCTION(krun_init) {
+    krun_init();
+}
+
+void HHVM_FUNCTION(krun_done) {
+    krun_done();
+}
+
+void HHVM_FUNCTION(krun_measure, int mdata_index) {
+    krun_measure(mdata_index);
+}
+
+double HHVM_FUNCTION(krun_clock_gettime_monotonic) {
+    return krun_clock_gettime_monotonic();
+}
+
+int HHVM_FUNCTION(krun_get_num_cores) {
+    return krun_get_num_cores();
+}
+
+double HHVM_FUNCTION(krun_get_wallclock, int mdata_index) {
+	return krun_get_wallclock(mdata_index);
+}
+
+double HHVM_FUNCTION(krun_get_core_cycles_double, int mdata_index, int core) {
+    return krun_get_core_cycles_double(mdata_index, core);
+}
+
+double HHVM_FUNCTION(krun_get_aperf_double, int mdata_index, int core) {
+    return krun_get_aperf_double(mdata_index, core);
+}
+
+double HHVM_FUNCTION(krun_get_mperf_double, int mdata_index, int core) {
+    return krun_get_mperf_double(mdata_index, core);
+}
+
 ///////////////////////////////////////////////////////////////////////////////
 }
diff --git a/hphp/runtime/ext/std/ext_std_misc.h b/hphp/runtime/ext/std/ext_std_misc.h
index 37950b5..6aef0af 100644
--- a/hphp/runtime/ext/std/ext_std_misc.h
+++ b/hphp/runtime/ext/std/ext_std_misc.h
@@ -48,6 +48,15 @@ Variant HHVM_FUNCTION(unpack, const String& format, const String& data);
 Array HHVM_FUNCTION(sys_getloadavg);
 Array HHVM_FUNCTION(token_get_all, const String& source);
 String HHVM_FUNCTION(token_name, int64_t token);
+void HHVM_FUNCTION(krun_init);
+void HHVM_FUNCTION(krun_done);
+void HHVM_FUNCTION(krun_measure, int mdata_index);
+double HHVM_FUNCTION(krun_clock_gettime_monotonic);
+int HHVM_FUNCTION(krun_get_num_cores);
+double HHVM_FUNCTION(krun_get_wallclock, int mdata_index);
+double HHVM_FUNCTION(krun_get_core_cycles_double, int mdata_index, int core);
+double HHVM_FUNCTION(krun_get_aperf_double, int mdata_index, int core);
+double HHVM_FUNCTION(krun_get_mperf_double, int mdata_index, int core);
 String HHVM_FUNCTION(hphp_to_string, const Variant& v);
 Variant HHVM_FUNCTION(SystemLib_max2, const Variant& arg1, const Variant& arg2);
 Variant HHVM_FUNCTION(SystemLib_min2, const Variant& arg1, const Variant& arg2);
diff --git a/hphp/runtime/ext/std/ext_std_misc.php b/hphp/runtime/ext/std/ext_std_misc.php
index 38f0fd6..00e3f32 100644
--- a/hphp/runtime/ext/std/ext_std_misc.php
+++ b/hphp/runtime/ext/std/ext_std_misc.php
@@ -227,6 +227,32 @@ function token_get_all(string $source): array;
 <<__ParamCoerceModeFalse, __Native>>
 function token_name(int $token): string;
 
+/* libkrun setup/teardown */
+<<__Native>>
+function krun_init(): void;
+<<__Native>>
+function krun_done(): void;
+
+/* Take measurements */
+<<__Native>>
+function krun_measure(int $mdata_index): void;
+<<__Native>>
+function krun_clock_gettime_monotonic(): double;
+
+/* How many per-core measurements? */
+<<__Native>>
+function krun_get_num_cores(): int;
+
+/* Extracting measurement values from libkruntime */
+<<__Native>>
+function krun_get_wallclock(int $mdata_index): double;
+<<__Native>>
+function krun_get_core_cycles_double(int $mdata_index, int $core): double;
+<<__Native>>
+function krun_get_aperf_double(int $mdata_index, int $core): double;
+<<__Native>>
+function krun_get_mperf_double(int $mdata_index, int $core): double;
+
 /* Casts a given value to a string.
  * @param mixed $v - The value being casted to a string.
  * @return string - The result of the string cast.
