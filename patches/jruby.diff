diff --git a/truffle/src/main/java/org/jruby/truffle/RubyContext.java b/truffle/src/main/java/org/jruby/truffle/RubyContext.java
index b0cbb23..d0691aa 100644
--- a/truffle/src/main/java/org/jruby/truffle/RubyContext.java
+++ b/truffle/src/main/java/org/jruby/truffle/RubyContext.java
@@ -56,6 +56,8 @@ import java.io.PrintStream;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;
 
+import jnr.ffi.LibraryLoader;
+
 public class RubyContext extends ExecutionContext {
 
     private static volatile RubyContext latestInstance;
@@ -92,6 +94,8 @@ public class RubyContext extends ExecutionContext {
     private final PrintStream debugStandardOut;
     private final CoverageManager coverageManager;
 
+    private final LibKrunTime libKrunTime;
+
     private final Object classVariableDefinitionLock = new Object();
 
     private final AttachmentsManager attachmentsManager;
@@ -161,6 +165,10 @@ public class RubyContext extends ExecutionContext {
         final PrintStream configStandardOut = jrubyRuntime.getInstanceConfig().getOutput();
         debugStandardOut = (configStandardOut == System.out) ? null : configStandardOut;
 
+        final LibraryLoader<LibKrunTime> libKrunTimeLoader = LibraryLoader.create(LibKrunTime.class);
+        libKrunTimeLoader.library("kruntime");
+        libKrunTime = libKrunTimeLoader.load();
+
         if (options.INSTRUMENTATION_SERVER_PORT != 0) {
             instrumentationServerManager = new InstrumentationServerManager(this, options.INSTRUMENTATION_SERVER_PORT);
             instrumentationServerManager.start();
@@ -348,4 +356,7 @@ public class RubyContext extends ExecutionContext {
         return coreExceptions;
     }
 
+    public LibKrunTime getLibKrunTime() {
+        return libKrunTime;
+    }
 }
diff --git a/truffle/src/main/java/org/jruby/truffle/core/kernel/KernelNodes.java b/truffle/src/main/java/org/jruby/truffle/core/kernel/KernelNodes.java
index 50a155d..469c667 100644
--- a/truffle/src/main/java/org/jruby/truffle/core/kernel/KernelNodes.java
+++ b/truffle/src/main/java/org/jruby/truffle/core/kernel/KernelNodes.java
@@ -141,6 +141,7 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
+import java.math.BigInteger;
 
 @CoreClass("Kernel")
 public abstract class KernelNodes {
@@ -1985,4 +1986,102 @@ public abstract class KernelNodes {
 
     }
 
+    @CoreMethod(names = "read_core_cycles", needsSelf=false)
+    public abstract static class ReadCoreCyclesNode extends CoreMethodArrayArgumentsNode {
+
+        private static final BigInteger negAdjust = BigInteger.ONE.shiftLeft(64); // 2^64
+
+        public ReadCoreCyclesNode(RubyContext context, SourceSection sourceSection) {
+            super(context, sourceSection);
+        }
+
+        @TruffleBoundary
+        @Specialization
+        public DynamicObject readCoreCycles() {
+            final long u64_in_s64 = getContext().getLibKrunTime().read_core_cycles();
+
+            BigInteger bi = BigInteger.valueOf(u64_in_s64);
+            if (u64_in_s64 < 0) {
+                bi = bi.add(ReadCoreCyclesNode.negAdjust);
+            }
+
+            return createBignum(bi);
+        }
+    }
+
+    @CoreMethod(names = "read_aperf", needsSelf=false)
+    public abstract static class ReadAperfNode extends CoreMethodArrayArgumentsNode {
+
+        private static final BigInteger negAdjust = BigInteger.ONE.shiftLeft(64); // 2^64
+
+        public ReadAperfNode(RubyContext context, SourceSection sourceSection) {
+            super(context, sourceSection);
+        }
+
+        @TruffleBoundary
+        @Specialization
+        public DynamicObject readAperf() {
+            final long u64_in_s64 = getContext().getLibKrunTime().read_aperf();
+
+            BigInteger bi = BigInteger.valueOf(u64_in_s64);
+            if (u64_in_s64 < 0) {
+                bi = bi.add(ReadAperfNode.negAdjust);
+            }
+
+            return createBignum(bi);
+        }
+    }
+
+    @CoreMethod(names = "read_mperf", needsSelf=false)
+    public abstract static class ReadMperfNode extends CoreMethodArrayArgumentsNode {
+
+        private static final BigInteger negAdjust = BigInteger.ONE.shiftLeft(64); // 2^64
+
+        public ReadMperfNode(RubyContext context, SourceSection sourceSection) {
+            super(context, sourceSection);
+        }
+
+        @TruffleBoundary
+        @Specialization
+        public DynamicObject readMperf() {
+            final long u64_in_s64 = getContext().getLibKrunTime().read_mperf();
+
+            BigInteger bi = BigInteger.valueOf(u64_in_s64);
+            if (u64_in_s64 < 0) {
+                bi = bi.add(ReadMperfNode.negAdjust);
+            }
+
+            return createBignum(bi);
+        }
+    }
+
+    @CoreMethod(names = "libkruntime_init", needsSelf=false)
+    public abstract static class LibKruntimeInitNode extends CoreMethodArrayArgumentsNode {
+
+        public LibKruntimeInitNode(RubyContext context, SourceSection sourceSection) {
+            super(context, sourceSection);
+        }
+
+        @TruffleBoundary
+        @Specialization
+        public DynamicObject libKruntimeInit() {
+            getContext().getLibKrunTime().libkruntime_init();
+            return nil();
+        }
+    }
+
+    @CoreMethod(names = "libkruntime_done", needsSelf=false)
+    public abstract static class LibKruntimeDoneNode extends CoreMethodArrayArgumentsNode {
+
+        public LibKruntimeDoneNode(RubyContext context, SourceSection sourceSection) {
+            super(context, sourceSection);
+        }
+
+        @TruffleBoundary
+        @Specialization
+        public DynamicObject libKruntimeDone() {
+            getContext().getLibKrunTime().libkruntime_done();
+            return nil();
+        }
+    }
 }
diff --git a/truffle/src/main/java/org/jruby/truffle/core/kernel/LibKrunTime.java b/truffle/src/main/java/org/jruby/truffle/core/kernel/LibKrunTime.java
new file mode 100644
index 0000000..52b9713
--- /dev/null
+++ b/truffle/src/main/java/org/jruby/truffle/core/kernel/LibKrunTime.java
@@ -0,0 +1,9 @@
+package org.jruby.truffle;
+
+public interface LibKrunTime {
+    void libkruntime_init();
+    void libkruntime_done();
+    long read_core_cycles();
+    long read_aperf();
+    long read_mperf();
+}
