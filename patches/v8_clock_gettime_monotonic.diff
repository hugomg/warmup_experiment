diff --git a/src/d8.cc b/src/d8.cc
index feda52a..250d064 100644
--- a/src/d8.cc
+++ b/src/d8.cc
@@ -2,6 +2,21 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+/*
+ * Stuff for clock_gettime_monotonic()
+ */
+#include <time.h>
+#include <stdlib.h>
+#include <math.h>
+#include <errno.h>
+#include <stdio.h>
+
+#if defined(__linux__)
+#define ACTUAL_CLOCK_MONOTONIC    CLOCK_MONOTONIC_RAW
+#else
+#define ACTUAL_CLOCK_MONOTONIC    CLOCK_MONOTONIC
+#endif
+
 
 // Defined when linking against shared lib on Windows.
 #if defined(USING_V8_SHARED) && !defined(V8_SHARED)
@@ -562,6 +577,18 @@ void Shell::Print(const v8::FunctionCallbackInfo<v8::Value>& args) {
   fflush(stdout);
 }
 
+void Shell::ClockGettimeMonotonic(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  struct timespec         ts;
+  double                  result;
+
+  if ((clock_gettime(ACTUAL_CLOCK_MONOTONIC, &ts)) < 0) {
+    perror("clock_gettime");
+    exit(1);
+  }
+
+  result = ts.tv_sec + ts.tv_nsec * pow(10, -9);
+  args.GetReturnValue().Set(result);
+}
 
 void Shell::Write(const v8::FunctionCallbackInfo<v8::Value>& args) {
   for (int i = 0; i < args.Length(); i++) {
@@ -946,6 +973,8 @@ Handle<ObjectTemplate> Shell::CreateGlobalTemplate(Isolate* isolate) {
   Handle<ObjectTemplate> global_template = ObjectTemplate::New(isolate);
   global_template->Set(String::NewFromUtf8(isolate, "print"),
                        FunctionTemplate::New(isolate, Print));
+  global_template->Set(String::NewFromUtf8(isolate, "clock_gettime_monotonic"),
+                       FunctionTemplate::New(isolate, ClockGettimeMonotonic));
   global_template->Set(String::NewFromUtf8(isolate, "write"),
                        FunctionTemplate::New(isolate, Write));
   global_template->Set(String::NewFromUtf8(isolate, "read"),
diff --git a/src/d8.h b/src/d8.h
index aac6228..06302a2 100644
--- a/src/d8.h
+++ b/src/d8.h
@@ -300,6 +300,7 @@ class Shell : public i::AllStatic {
                              const  PropertyCallbackInfo<void>& info);
 
   static void Print(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void ClockGettimeMonotonic(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Write(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Quit(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Version(const v8::FunctionCallbackInfo<v8::Value>& args);
