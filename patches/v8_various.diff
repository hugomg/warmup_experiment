diff --git a/src/d8.cc b/src/d8.cc
index 0688380..9c26907 100644
--- a/src/d8.cc
+++ b/src/d8.cc
@@ -2,6 +2,20 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+/*
+ * Stuff for clock_gettime_monotonic()
+ */
+#include <time.h>
+#include <stdlib.h>
+#include <math.h>
+#include <errno.h>
+#include <stdio.h>
+
+#if defined(__linux__)
+#define ACTUAL_CLOCK_MONOTONIC    CLOCK_MONOTONIC_RAW
+#else
+#define ACTUAL_CLOCK_MONOTONIC    CLOCK_MONOTONIC
+#endif
 
 // Defined when linking against shared lib on Windows.
 #if defined(USING_V8_SHARED) && !defined(V8_SHARED)
@@ -627,6 +641,39 @@ void Shell::Print(const v8::FunctionCallbackInfo<v8::Value>& args) {
   fflush(stdout);
 }
 
+void Shell::PrintErr(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  WriteErr(args);
+  fprintf(stderr, "\n");
+  fflush(stderr);
+}
+
+void Shell::ClockGettimeMonotonic(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  struct timespec         ts;
+  double                  result;
+
+  if ((clock_gettime(ACTUAL_CLOCK_MONOTONIC, &ts)) < 0) {
+    perror("clock_gettime");
+    exit(1);
+  }
+
+  result = ts.tv_sec + ts.tv_nsec * pow(10, -9);
+  args.GetReturnValue().Set(result);
+}
+
+/*
+ * Derived from:
+ * $OpenBSD: pctr.h,v 1.5 2014/03/29 18:09:28 guenther Exp$
+ */
+void Shell::ReadTSReg(const v8::FunctionCallbackInfo<v8::Value>& args) {
+    u_int32_t hi, lo;
+    u_int64_t result;
+
+    __asm volatile("rdtsc" : "=d" (hi), "=a" (lo));
+    result = ((u_int64_t) hi << 32) | (u_int64_t) lo;
+
+    // the cast is not ideal
+    args.GetReturnValue().Set((double) result);
+}
 
 void Shell::Write(const v8::FunctionCallbackInfo<v8::Value>& args) {
   for (int i = 0; i < args.Length(); i++) {
@@ -658,6 +705,33 @@ void Shell::Write(const v8::FunctionCallbackInfo<v8::Value>& args) {
   }
 }
 
+void Shell::WriteErr(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  Isolate* isolate = args.GetIsolate();
+  for (int j = 0; j < args.Length(); j++) {
+    HandleScope handle_scope(args.GetIsolate());
+    if (j != 0) {
+      printf(" ");
+    }
+
+    // Explicitly catch potential exceptions in toString().
+    v8::TryCatch try_catch(isolate);
+    Local<String> str_obj;
+    if (!args[j]
+             ->ToString(args.GetIsolate()->GetCurrentContext())
+             .ToLocal(&str_obj)) {
+      try_catch.ReThrow();
+      return;
+    }
+
+    v8::String::Utf8Value str(str_obj);
+    int n = static_cast<int>(fwrite(*str, sizeof(**str), str.length(), stderr));
+    if (n != str.length()) {
+      printf("Error in fwrite\n");
+      Exit(1);
+    }
+  }
+}
+
 
 void Shell::Read(const v8::FunctionCallbackInfo<v8::Value>& args) {
   String::Utf8Value file(args[0]);
@@ -1082,10 +1156,26 @@ Local<ObjectTemplate> Shell::CreateGlobalTemplate(Isolate* isolate) {
           .ToLocalChecked(),
       FunctionTemplate::New(isolate, Print));
   global_template->Set(
+      String::NewFromUtf8(isolate, "print_err", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, PrintErr));
+  global_template->Set(
+      String::NewFromUtf8(isolate, "clock_gettime_monotonic", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, ClockGettimeMonotonic));
+  global_template->Set(
+      String::NewFromUtf8(isolate, "read_ts_reg", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, ReadTSReg));
+  global_template->Set(
       String::NewFromUtf8(isolate, "write", NewStringType::kNormal)
           .ToLocalChecked(),
       FunctionTemplate::New(isolate, Write));
   global_template->Set(
+      String::NewFromUtf8(isolate, "write_err", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, WriteErr));
+  global_template->Set(
       String::NewFromUtf8(isolate, "read", NewStringType::kNormal)
           .ToLocalChecked(),
       FunctionTemplate::New(isolate, Read));
diff --git a/src/d8.h b/src/d8.h
index 321d9c1..64e1c94 100644
--- a/src/d8.h
+++ b/src/d8.h
@@ -385,7 +385,11 @@ class Shell : public i::AllStatic {
                              const  PropertyCallbackInfo<void>& info);
 
   static void Print(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void PrintErr(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void ClockGettimeMonotonic(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void ReadTSReg(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Write(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void WriteErr(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void QuitOnce(v8::FunctionCallbackInfo<v8::Value>* args);
   static void Quit(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Version(const v8::FunctionCallbackInfo<v8::Value>& args);
