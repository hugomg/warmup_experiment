diff --git a/src/d8.cc b/src/d8.cc
index 0688380..6ce1f3c 100644
--- a/src/d8.cc
+++ b/src/d8.cc
@@ -2,6 +2,9 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include <stdio.h>
+#include <stdint.h>
+#include <libkruntime.h>
 
 // Defined when linking against shared lib on Windows.
 #if defined(USING_V8_SHARED) && !defined(V8_SHARED)
@@ -627,6 +630,35 @@ void Shell::Print(const v8::FunctionCallbackInfo<v8::Value>& args) {
   fflush(stdout);
 }
 
+void Shell::PrintErr(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  WriteErr(args);
+  fprintf(stderr, "\n");
+  fflush(stderr);
+}
+
+void Shell::ClockGettimeMonotonic(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  args.GetReturnValue().Set(clock_gettime_monotonic());
+}
+
+void Shell::ReadCoreCyclesDouble(const v8::FunctionCallbackInfo<v8::Value>& args) {
+    args.GetReturnValue().Set(read_core_cycles_double());
+}
+
+void Shell::ReadAperfDouble(const v8::FunctionCallbackInfo<v8::Value>& args) {
+    args.GetReturnValue().Set(read_aperf_double());
+}
+
+void Shell::ReadMperfDouble(const v8::FunctionCallbackInfo<v8::Value>& args) {
+    args.GetReturnValue().Set(read_mperf_double());
+}
+
+void Shell::LibKruntimeInit(const v8::FunctionCallbackInfo<v8::Value>& args) {
+    libkruntime_init();
+}
+
+void Shell::LibKruntimeDone(const v8::FunctionCallbackInfo<v8::Value>& args) {
+    libkruntime_done();
+}
 
 void Shell::Write(const v8::FunctionCallbackInfo<v8::Value>& args) {
   for (int i = 0; i < args.Length(); i++) {
@@ -658,6 +690,33 @@ void Shell::Write(const v8::FunctionCallbackInfo<v8::Value>& args) {
   }
 }
 
+void Shell::WriteErr(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  Isolate* isolate = args.GetIsolate();
+  for (int j = 0; j < args.Length(); j++) {
+    HandleScope handle_scope(args.GetIsolate());
+    if (j != 0) {
+      printf(" ");
+    }
+
+    // Explicitly catch potential exceptions in toString().
+    v8::TryCatch try_catch(isolate);
+    Local<String> str_obj;
+    if (!args[j]
+             ->ToString(args.GetIsolate()->GetCurrentContext())
+             .ToLocal(&str_obj)) {
+      try_catch.ReThrow();
+      return;
+    }
+
+    v8::String::Utf8Value str(str_obj);
+    int n = static_cast<int>(fwrite(*str, sizeof(**str), str.length(), stderr));
+    if (n != str.length()) {
+      printf("Error in fwrite\n");
+      Exit(1);
+    }
+  }
+}
+
 
 void Shell::Read(const v8::FunctionCallbackInfo<v8::Value>& args) {
   String::Utf8Value file(args[0]);
@@ -1082,10 +1141,42 @@ Local<ObjectTemplate> Shell::CreateGlobalTemplate(Isolate* isolate) {
           .ToLocalChecked(),
       FunctionTemplate::New(isolate, Print));
   global_template->Set(
+      String::NewFromUtf8(isolate, "print_err", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, PrintErr));
+  global_template->Set(
+      String::NewFromUtf8(isolate, "clock_gettime_monotonic", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, ClockGettimeMonotonic));
+  global_template->Set(
+      String::NewFromUtf8(isolate, "read_core_cycles_double", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, ReadCoreCyclesDouble));
+  global_template->Set(
+      String::NewFromUtf8(isolate, "read_aperf_double", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, ReadAperfDouble));
+  global_template->Set(
+      String::NewFromUtf8(isolate, "read_mperf_double", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, ReadMperfDouble));
+  global_template->Set(
+      String::NewFromUtf8(isolate, "libkruntime_init", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, LibKruntimeInit));
+  global_template->Set(
+      String::NewFromUtf8(isolate, "libkruntime_done", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, LibKruntimeDone));
+  global_template->Set(
       String::NewFromUtf8(isolate, "write", NewStringType::kNormal)
           .ToLocalChecked(),
       FunctionTemplate::New(isolate, Write));
   global_template->Set(
+      String::NewFromUtf8(isolate, "write_err", NewStringType::kNormal)
+          .ToLocalChecked(),
+      FunctionTemplate::New(isolate, WriteErr));
+  global_template->Set(
       String::NewFromUtf8(isolate, "read", NewStringType::kNormal)
           .ToLocalChecked(),
       FunctionTemplate::New(isolate, Read));
diff --git a/src/d8.gyp b/src/d8.gyp
index f249a78..38a5003 100644
--- a/src/d8.gyp
+++ b/src/d8.gyp
@@ -46,6 +46,17 @@
       'include_dirs+': [
         '..',
       ],
+      'link_settings': {
+        'libraries+': [
+          '-lkruntime',
+	],
+        'ldflags+': [
+          '-L<!(echo $LIBKRUN_DIR)',
+        ],
+      },
+      'cflags_cc+': [
+	'-I<!(echo $LIBKRUN_DIR)',
+      ],
       'sources': [
         'd8.h',
         'd8.cc',
diff --git a/src/d8.h b/src/d8.h
index 321d9c1..5516809 100644
--- a/src/d8.h
+++ b/src/d8.h
@@ -385,7 +385,15 @@ class Shell : public i::AllStatic {
                              const  PropertyCallbackInfo<void>& info);
 
   static void Print(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void PrintErr(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void ClockGettimeMonotonic(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void ReadCoreCyclesDouble(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void ReadAperfDouble(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void ReadMperfDouble(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void LibKruntimeInit(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void LibKruntimeDone(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Write(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void WriteErr(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void QuitOnce(v8::FunctionCallbackInfo<v8::Value>* args);
   static void Quit(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Version(const v8::FunctionCallbackInfo<v8::Value>& args);
