import os
import sys
from krun.vm_defs import (PythonVMDef, LuaVMDef, JavaVMDef, GraalVMDef,
		          PHPVMDef, JRubyTruffleVMDef, V8VMDef, NativeCodeVMDef,
			  find_internal_jvmci_java_bin)
from krun import EntryPoint

# Who to mail
MAIL_TO = []

# Maximum number of error emails to send per-run
#MAX_MAILS = 2

DIR = os.getcwd()
JKRUNTIME_DIR = os.path.join(DIR, "krun", "libkruntime", "")

if not sys.platform.startswith("openbsd"):
    JDK8_HOME = os.path.join(DIR, "work/openjdk/build/linux-x86_64-normal-server-release/images/j2sdk-image/")
else:
    JDK8_HOME = os.path.join(DIR, "work/openjdk/build/bsd-x86_64-normal-server-release/images/j2sdk-image/")

JDK8_BIN = os.path.join(JDK8_HOME, "bin", "java")

HEAP_LIMIT = 2097152  # K == 2Gb

# Variant name -> EntryPoint
VARIANTS = {
    "default-c": EntryPoint("bench.so", subdir="c"),
    "default-java": EntryPoint("KrunEntry", subdir="java"),
    "default-lua": EntryPoint("bench.lua", subdir="lua"),
    "default-python": EntryPoint("bench.py", subdir="python"),
    "default-php": EntryPoint("bench.php", subdir="php"),
    "default-ruby": EntryPoint("bench.rb", subdir="ruby"),
    "default-javascript": EntryPoint("bench.js", subdir="javascript"),
}

ITERATIONS_ALL_VMS = 2000

VMS = {
        'C': {
		'vm_def': NativeCodeVMDef(),
		'variants': ['default-c'],
		'n_iterations': ITERATIONS_ALL_VMS,

        },
	'PyPy': {
		'vm_def': PythonVMDef('work/pypy/pypy/goal/pypy-c'),
		'variants': ['default-python'],
		'n_iterations': ITERATIONS_ALL_VMS,
	},
	'Hotspot': {
		'vm_def': JavaVMDef(JDK8_BIN),
		'variants': ['default-java'],
		'n_iterations': ITERATIONS_ALL_VMS,
	},
	'LuaJIT': {
		'vm_def': LuaVMDef('work/luajit/src/luajit'),
		'variants': ['default-lua'],
		'n_iterations': ITERATIONS_ALL_VMS,
	},
	'V8': {
		'vm_def': V8VMDef('work/v8/out/native/d8'),
		'variants': ['default-javascript'],
		'n_iterations': ITERATIONS_ALL_VMS,
	},
	'CPython': {
		'vm_def': PythonVMDef('work/cpython-inst/bin/python'),
		'variants': ['default-python'],
		'n_iterations': ITERATIONS_ALL_VMS,
	}
}

if not sys.platform.startswith("openbsd"):
    # The following VMs do not run on OpenBSD.
    VMS.update({
        'Graal': {
            'vm_def': GraalVMDef(find_internal_jvmci_java_bin('work/jvmci/'), JDK8_HOME),
            'variants': ['default-java'],
            'n_iterations': ITERATIONS_ALL_VMS,
        },
        'HHVM': {
            'vm_def': PHPVMDef('work/hhvm/hphp/hhvm/php'),
            'variants': ['default-php'],
            'n_iterations': ITERATIONS_ALL_VMS,
        },
        'JRubyTruffle' : {
            'vm_def': JRubyTruffleVMDef('work/jruby/bin/jruby',
                                        java_path=find_internal_jvmci_java_bin('work/jvmci/')),
            'variants': ['default-ruby'],
            'n_iterations': ITERATIONS_ALL_VMS,
        },
    })


BENCHMARKS = {
    'binarytrees': 25,
    'richards': 500,
    'spectralnorm': 3,
    'nbody': 15,
    'fasta': 100,
    'fannkuch_redux': 200,
}

# list of "bench:vm:variant"
SKIP=[
    # Uncomment to skip whole VMs
    #
    #"*:PyPy:*",
    #"*:CPython:*",
    #"*:Hotspot:*",
    #"*:Graal:*",
    #"*:LuaJIT:*",
    #"*:HHVM:*",
    #"*:JRubyTruffle:*",
    #"*:V8:*",
    #"*:C:*",

    # XXX: We skip the *really* slow experiments for now
    "fasta:JRubyTruffle:default-ruby",
    "richards:HHVM:default-php",

    # XXX: This experiment crashes, after about 250 iterations. We skip it for
    # now. There is a good chance a newer Graal and/or JRuby may fix this.
    "spectralnorm:JRubyTruffle:default-ruby",

    # XXX: And skip all CPython runs for now. After the draft paper, reenable.
    "*:CPython:*",
]

N_EXECUTIONS = 2  # Number of fresh processes.
